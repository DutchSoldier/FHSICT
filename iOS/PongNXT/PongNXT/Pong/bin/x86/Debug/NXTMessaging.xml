<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NXTMessaging</name>
    </assembly>
    <members>
        <member name="T:NXTMessaging.NXTMessenger">
            <summary>
            This class provides services to communicate with a Lego NXT robot.
            </summary> 
            <remarks>
            <para>Globally the services are:</para> 
            <list type="bullet">
            <item>Managing the connection to the Lego NXT,<br/>see <see cref="M:NXTMessaging.NXTMessenger.Connect(System.String)"/>, <see cref="M:NXTMessaging.NXTMessenger.Disconnect"/> and <see cref="M:NXTMessaging.NXTMessenger.Beep"/> (the latter for testing).</item>
            <item>Sending messages to the Lego NXT,<br/>see <see cref="M:NXTMessaging.NXTMessenger.SendMessage(System.String,System.Int32)"/>, <see cref="M:NXTMessaging.NXTMessenger.SendMessage(System.Boolean,System.Int32)"/>, <see cref="M:NXTMessaging.NXTMessenger.SendMessage(System.Single,System.Int32)"/> and <see cref="M:NXTMessaging.NXTMessenger.SendMessage(System.Int32,System.Int32)"/>.</item>
            <item>Receiving messages from the Lego NXT,<br/>see <see cref="M:NXTMessaging.NXTMessenger.ReceiveMessage(System.Int32,System.String@)"/>, <see cref="M:NXTMessaging.NXTMessenger.ReceiveMessage(System.Int32,System.Boolean@)"/>, <see cref="M:NXTMessaging.NXTMessenger.ReceiveMessage(System.Int32,System.Single@)"/> and <see cref="M:NXTMessaging.NXTMessenger.ReceiveMessage(System.Int32,System.Int32@)"/>.</item>
            <item>Enabling buffering for message receiving (i.e. message reading), which is needed if you want to call message receiving methods without delay (e.g. in the XNA update loop),<br/>see <see cref="M:NXTMessaging.NXTMessenger.EnableReadBuffering(System.Int32,System.Boolean)"/> and <see cref="M:NXTMessaging.NXTMessenger.IsReadBufferingEnabled(System.Int32)"/>.</item>
            <item>Lego NXT device name retrieval,<br/>see the <see cref="P:NXTMessaging.NXTMessenger.DeviceName"/> property.</item>
            <item>Validating serial port names that are used to setup the connection,<br/>see <see cref="M:NXTMessaging.NXTMessenger.IsValidSerialPortName(System.String)"/>.</item>
            </list>
            </remarks>
        </member>
        <member name="F:NXTMessaging.NXTMessenger.MailBoxMinValue">
            <summary>
            The value of the first mailbox available on the Lego NXT.
            </summary>
            <value>
            (Int32) 1
            </value>
            <remarks>
            <para>Mailboxes on the Lego NXT are identified by a number in the range 1..10.</para>
            <para>For example code, see the <see cref="M:NXTMessaging.NXTMessenger.SendMessage(System.String,System.Int32)"/> method.</para>
            </remarks>
        </member>
        <member name="F:NXTMessaging.NXTMessenger.MailBoxMaxValue">
            <summary>
            The value of the last mailbox available on the Lego NXT.
            </summary>
            <value>
            (Int32) 10
            </value>
            <remarks>
            <para>Mailboxes on the Lego NXT are identified by a number in the range 1..10.</para>
            <para>For example code, see the <see cref="M:NXTMessaging.NXTMessenger.SendMessage(System.String,System.Int32)"/> method.</para>
            </remarks>
        </member>
        <member name="F:NXTMessaging.NXTMessenger.MaxLengthOfMessage">
            <summary>
            The maximum size of messages.
            </summary>
            <value>
            58 bytes
            </value>
            <remarks>
            <para>For example code, see the <see cref="M:NXTMessaging.NXTMessenger.SendMessage(System.String,System.Int32)"/> method.</para>
            </remarks>
        </member>
        <member name="M:NXTMessaging.NXTMessenger.#ctor">
            <summary>
            Creates an instance of NXTMessenger.
            </summary>        
            <remarks>For example code, see the <see cref="M:NXTMessaging.NXTMessenger.Connect(System.String)"/> method.</remarks>
        </member>
        <member name="M:NXTMessaging.NXTMessenger.IsReadBufferingEnabled(System.Int32)">
            <summary>
            Checks if read buffering is enabled for the specified mailbox.
            <para>See <see cref="M:NXTMessaging.NXTMessenger.EnableReadBuffering(System.Int32,System.Boolean)"/></para>
            </summary>
            <param name="mailbox">The mailbox for which to check the buffered status.</param>
            <returns>True if the specified mailbox has read buffering enabled, else False. </returns>
        </member>
        <member name="M:NXTMessaging.NXTMessenger.EnableReadBuffering(System.Int32,System.Boolean)">
            <summary>
            Enables/disables read buffering for the specified mailbox.
            <para>By default, read buffering is DISABLED for all mailboxes.</para>
            <para>The more mailboxes you enable to buffer, the slower the actual response from the NXT will be.<br/>
            This is because reading a message from the NXT takes 50ms. Reading 10 mailboxes takes 500ms!!!<br/>
            Thus half a second of input delay from the NXT to the C# app.</para>
            <para>Hint:<br/> 
            Enable buffering only when you REALLY need it, e.g. to prevent delays in your program when reading a mailbox.<br/>
            Enabled buffering does not mean information will travel faster from the NXT to your PC.</para>
            <para>See <see cref="M:NXTMessaging.NXTMessenger.IsReadBufferingEnabled(System.Int32)"/></para>
            </summary>
            <param name="mailbox">The mailbox for which to enable/disable read buffering.</param>
            <param name="enabled">Enables read buffering for the given mailbox if true, else disables read buffering for the given mailbox.</param>
        </member>
        <member name="M:NXTMessaging.NXTMessenger.Connect(System.String)">
            <summary>
            Connect to the Lego NXT Robot.<br/>
            You need te be connected before you can send or receive messages.
            </summary>
            <param name="portName">The serial port to which the NXT is connected (over bluetooth).</param>
            <returns>True if connecting to the Lego NXT succeeeded, else false.</returns>
            <remarks>
            <para>You can test the connection by using the <see cref="M:NXTMessaging.NXTMessenger.Beep"/> method.</para>
            <para>Valid names for serial ports are: "COM1", "COM2", "COM3",...</para>
            </remarks>
            <example>Example of connecting to a Lego NXT on serial port COM8:
            <code>
            using System;
            using NXTMessaging;
            
            namespace NXTMessengerConsoleCodeExamples
            {
                class Program
                {
                    static void Main(string[] args) // Connection Example
                    {
                    	// Somewhere in your code you need an NXTMessenger instance.
                    	// Probably as private member of a class. 
                    	// For the sake of simplicity, we just put it here in this example.
                    	NXTMessenger nxtMessenger = new NXTMessenger();
                    
                    	// Try to connect to the Lego NXT on serial port "COM8"
                    	String serialPort = "COM8";
                    	bool isConnected = nxtMessenger.Connect(serialPort);
                    
                    	// Check if connection succeeded or failed.
                    	if (isConnected)
                    	{
                    		Console.WriteLine("Connection to Lego NXT on serial port \""
                    			+ serialPort + " \" succeeded.");
                    
                    		// Print the name of the connected NXT
                    		Console.WriteLine("The name of the connected NXT is: "
                    			+ nxtMessenger.DeviceName);
                    
                    		// Sound a test beep on the Lego NXT
                    		nxtMessenger.Beep();  
                    	}
                    	else
                    	{
                    		Console.WriteLine("Could not connect the the Lego NXT on serial port \""
                    			+ serialPort + "\".");
                    	}
                    
                    	Console.WriteLine("Press 'enter' or 'return' key to leave the program.");
                    	Console.ReadLine();
                    	
                        // Always disconnect at the end of your program.
                    	nxtMessenger.Disconnect();
                    }
                }
            }    
            </code>
            </example>
        </member>
        <member name="M:NXTMessaging.NXTMessenger.Disconnect">
            <summary>
            Close the connection to the NXT.
            </summary>
            <remarks>
            <para>For example code, see the <see cref="M:NXTMessaging.NXTMessenger.Connect(System.String)"/> method.</para>
            <para>Important: Connections should be closed before exiting your program.</para>
            </remarks>
        </member>
        <member name="M:NXTMessaging.NXTMessenger.Beep">
            <summary>
            Perform a test beep on the Lego NXT. 
            </summary>
            <remarks>
            <para>If no beep is heard on the NXT, then there is a connection failure.</para>
            <para>For example code, see the <see cref="M:NXTMessaging.NXTMessenger.Connect(System.String)"/> method.</para>
            </remarks>
        </member>
        <member name="M:NXTMessaging.NXTMessenger.SendMessage(System.String,System.Int32)">
            <summary>
            Send a text message to a mailbox of the NXT.
            <br/>You need to be connected before you can send a message, see <see cref="M:NXTMessaging.NXTMessenger.Connect(System.String)"/>.
            </summary>
            <param name="message">The message to send. See <see cref="F:NXTMessaging.NXTMessenger.MaxLengthOfMessage"/> for the max allowed length of the message.</param>
            <param name="mailbox">The mailbox to send the message to. <see cref="F:NXTMessaging.NXTMessenger.MailBoxMinValue"/> and <see cref="F:NXTMessaging.NXTMessenger.MailBoxMaxValue"/> define the valid range of mailboxes.</param>
            <returns>The result of the communication, see <see cref="T:NXTMessaging.NXTCommandResult"/></returns>
            <remarks>
            SendMessage is a synchronous, non blocking call.
            </remarks>
            <example>
            Example of sending a text message a Lego NXT.
            <code>
            using System;
            using NXTMessaging;
            
            namespace NXTMessengerConsoleCodeExamples
            {
                class Program
                {
                    static void Main(string[] args) // SendMessage example
                    {
                        // Somewhere in your code you need an NXTMessenger instance.
                        // Probably as private member of a class. 
                        // For the sake of simplicity, we just put it here in this example.
                        NXTMessenger nxtMessenger = new NXTMessenger();
            
                        // Try to connect to the Lego NXT on serial port "COM8"
                        String serialPort = "COM8"; // Replace "COM8" by the port you need!!
                        bool isConnected = nxtMessenger.Connect(serialPort);
            
                        // Check if connection succeeded or failed.
                        if (isConnected)
                        {
                            // Read a mailbox number from the console
                            Console.WriteLine("Please enter a mailbox to send a text message to (1..10): ");
                            int mailbox = Convert.ToInt32(Console.ReadLine());
            
                            // Read the message to send to the NXT from the console 
                            Console.WriteLine("Please enter a text message to send: ");
                            String message = Console.ReadLine();
            
                            if (message.Length &lt;= NXTMessenger.MaxLengthOfMessage
                                &amp;&amp; mailbox &gt;= NXTMessenger.MailBoxMinValue
                                &amp;&amp; mailbox &lt;= NXTMessenger.MailBoxMaxValue)
                            {
                                NXTCommandResult result = nxtMessenger.SendMessage(message, mailbox);
                                if (result != NXTCommandResult.Success)
                                {
                                    Console.WriteLine("There was a problem delivering the message: "
                                        + NXTCommandResultConverter.ToString(result));
                                }
                            }
                            else
                            {
                                Console.WriteLine("You did not enter a mailbox number in the range 1..10\n"
                                    + "or the message was larger than " + NXTMessenger.MaxLengthOfMessage
                                    + " characters.");
                            }
                        }
                        else
                        {
                            Console.WriteLine("Could not connect the the Lego NXT on serial port \""
                                + serialPort + "\".");
                        }
            
                        Console.WriteLine("Press 'enter' or 'return' key to leave the program.");
                        Console.ReadLine();
            
                        // Always disconnect at the end of your program.
                        nxtMessenger.Disconnect();
                    }
                }
            }
            </code>
            </example>
        </member>
        <member name="M:NXTMessaging.NXTMessenger.SendMessage(System.Boolean,System.Int32)">
            <summary>
            Send a logic (bool) message to a mailbox of the NXT.
            <br/>You need to be connected before you can send a message, see <see cref="M:NXTMessaging.NXTMessenger.Connect(System.String)"/>.
            </summary>
            <param name="message">The message to send.</param>
            <param name="mailbox">The mailbox to send the message to. <see cref="F:NXTMessaging.NXTMessenger.MailBoxMinValue"/> and <see cref="F:NXTMessaging.NXTMessenger.MailBoxMaxValue"/> define the valid range of mailboxes.</param>
            <returns>The result of the communication, see <see cref="T:NXTMessaging.NXTCommandResult"/></returns>
            <remarks>
            SendMessage is a synchronous, non blocking call.
            </remarks>
            <example>
            Example of sending a logic (bool) message a Lego NXT.
            <code>
            using System;
            using NXTMessaging;
            
            namespace NXTMessengerConsoleCodeExamples
            {
                class Program
                {
                    static void Main(string[] args) // SendMessage example
                    {
                        // Somewhere in your code you need an NXTMessenger instance.
                        // Probably as private member of a class. 
                        // For the sake of simplicity, we just put it here in this example.
                        NXTMessenger nxtMessenger = new NXTMessenger();
            
                        // Try to connect to the Lego NXT on serial port "COM8"
                        String serialPort = "COM8"; // Replace "COM8" by the port you need!!
                        bool isConnected = nxtMessenger.Connect(serialPort);
            
                        // Check if connection succeeded or failed.
                        if (isConnected)
                        {
                            // Read a mailbox number from the console
                            Console.WriteLine("Please enter a mailbox to send a text message to (1..10): ");
                            int mailbox = Convert.ToInt32(Console.ReadLine());
            
                            // Read the message to send to the NXT from the console 
                            Console.WriteLine("Please enter a bool message to send (true/false): ");
                            bool message = Convert.ToBoolean(Console.ReadLine());
            
                            if (mailbox &gt;= NXTMessenger.MailBoxMinValue
                                &amp;&amp; mailbox &lt;= NXTMessenger.MailBoxMaxValue)
                            {
                                NXTCommandResult result = nxtMessenger.SendMessage(message, mailbox);
                                if (result != NXTCommandResult.Success)
                                {
                                    Console.WriteLine("There was a problem delivering the message: "
                                        + NXTCommandResultConverter.ToString(result));
                                }
                            }
                            else
                            {
                                Console.WriteLine("You did not enter a mailbox number in the range 1..10");
                            }
                        }
                        else
                        {
                            Console.WriteLine("Could not connect the the Lego NXT on serial port \""
                                + serialPort + "\".");
                        }
            
                        Console.WriteLine("Press 'enter' or 'return' key to leave the program.");
                        Console.ReadLine();
            
                        // Always disconnect at the end of your program.
                        nxtMessenger.Disconnect();
                    }
                }
            }
            </code>
            </example>
        </member>
        <member name="M:NXTMessaging.NXTMessenger.SendMessage(System.Int32,System.Int32)">
            <summary>
            <para>Send a number message to a mailbox of the NXT. The number format is Int32.
            <br/>You need to be connected before you can send a message, see <see cref="M:NXTMessaging.NXTMessenger.Connect(System.String)"/>.</para>
            <para>Required when using NXT-G 1.0 or NXT-G 1.1.</para>
            </summary>
            <param name="message">The message to send.</param>
            <param name="mailbox">The mailbox to send the message to. <see cref="F:NXTMessaging.NXTMessenger.MailBoxMinValue"/> and <see cref="F:NXTMessaging.NXTMessenger.MailBoxMaxValue"/> define the valid range of mailboxes.</param>
            <returns>The result of the communication, see <see cref="T:NXTMessaging.NXTCommandResult"/></returns>
            <remarks>
            <para>SendMessage is a synchronous, non blocking call.</para>
            <para>The 'Receive Message Block' from programs generated by NXT-G 1.0 and 1.1
            expects a 32 bit integer when the message type is set to 'Number'.</para>
            <para>Works on all firmware.</para>
            </remarks>
            <example>
            Example of sending a number (Int32) message a Lego NXT.
            <code>
            using System;
            using NXTMessaging;
            
            namespace NXTMessengerConsoleCodeExamples
            {
                class Program
                {
                    static void Main(string[] args) // SendMessage example
                    {
                        // Somewhere in your code you need an NXTMessenger instance.
                        // Probably as private member of a class. 
                        // For the sake of simplicity, we just put it here in this example.
                        NXTMessenger nxtMessenger = new NXTMessenger();
            
                        // Try to connect to the Lego NXT on serial port "COM8"
                        String serialPort = "COM8"; // Replace "COM8" by the port you need!!
                        bool isConnected = nxtMessenger.Connect(serialPort);
            
                        // Check if connection succeeded or failed.
                        if (isConnected)
                        {
                            // Read a mailbox number from the console
                            Console.WriteLine("Please enter a mailbox to send a text message to (1..10): ");
                            int mailbox = Convert.ToInt32(Console.ReadLine());
            
                            // Read the message to send to the NXT from the console 
                            Console.WriteLine("Please enter a number message to send (Int32): ");
                            int message = Convert.ToInt32(Console.ReadLine());
            
                            if (mailbox &gt;= NXTMessenger.MailBoxMinValue
                                &amp;&amp; mailbox &lt;= NXTMessenger.MailBoxMaxValue)
                            {
                                NXTCommandResult result = nxtMessenger.SendMessage(message, mailbox);
                                if (result != NXTCommandResult.Success)
                                {
                                    Console.WriteLine("There was a problem delivering the message: "
                                        + NXTCommandResultConverter.ToString(result));
                                }
                            }
                            else
                            {
                                Console.WriteLine("You did not enter a mailbox number in the range 1..10");
                            }
                        }
                        else
                        {
                            Console.WriteLine("Could not connect the the Lego NXT on serial port \""
                                + serialPort + "\".");
                        }
            
                        Console.WriteLine("Press 'enter' or 'return' key to leave the program.");
                        Console.ReadLine();
            
                        // Always disconnect at the end of your program.
                        nxtMessenger.Disconnect();
                    }
                }
            }
            </code>
            </example>
        </member>
        <member name="M:NXTMessaging.NXTMessenger.SendMessage(System.Single,System.Int32)">
            <summary>
            <para>Send a number message to a mailbox of the NXT. The number format is float.
            <br/>You need to be connected before you can send a message, see <see cref="M:NXTMessaging.NXTMessenger.Connect(System.String)"/>.</para>
            <para>Required when using NXT-G 2.1. Requires Firmware v1.28 or higher on the Lego NXT.</para>
            </summary>
            <param name="message">The message to send.</param>
            <param name="mailbox">The mailbox to send the message to. <see cref="F:NXTMessaging.NXTMessenger.MailBoxMinValue"/> and <see cref="F:NXTMessaging.NXTMessenger.MailBoxMaxValue"/> define the valid range of mailboxes.</param>
            <returns>The result of the communication, see <see cref="T:NXTMessaging.NXTCommandResult"/></returns>
            <remarks>
            <para>SendMessage is a synchronous, non blocking call.</para>
            <para>The 'Receive Message Block' from programs generated by NXT-G 2.1
            expects a single precision floating point number
            when the message type is set to 'Number'.</para>
            <para>Firmware v1.28 or higher is is required on the Lego NXT.</para>
            </remarks>
            <example>
            Example of sending a number (floating point) message a Lego NXT.
            <code>
            using System;
            using NXTMessaging;
            
            namespace NXTMessengerConsoleCodeExamples
            {
                class Program
                {
                    static void Main(string[] args) // SendMessage example
                    {
                        // Somewhere in your code you need an NXTMessenger instance.
                        // Probably as private member of a class. 
                        // For the sake of simplicity, we just put it here in this example.
                        NXTMessenger nxtMessenger = new NXTMessenger();
            
                        // Try to connect to the Lego NXT on serial port "COM8"
                        String serialPort = "COM8"; // Replace "COM8" by the port you need!!
                        bool isConnected = nxtMessenger.Connect(serialPort);
            
                        // Check if connection succeeded or failed.
                        if (isConnected)
                        {
                            // Read a mailbox number from the console
                            Console.WriteLine("Please enter a mailbox to send a text message to (1..10): ");
                            int mailbox = Convert.ToInt32(Console.ReadLine());
            
                            // Read the message to send to the NXT from the console 
                            Console.WriteLine("Please enter a number message to send (float): ");
                            float message = Convert.ToSingle(Console.ReadLine());
            
                            if (mailbox &gt;= NXTMessenger.MailBoxMinValue
                                &amp;&amp; mailbox &lt;= NXTMessenger.MailBoxMaxValue)
                            {
                                NXTCommandResult result = nxtMessenger.SendMessage(message, mailbox);
                                if (result != NXTCommandResult.Success)
                                {
                                    Console.WriteLine("There was a problem delivering the message: "
                                        + NXTCommandResultConverter.ToString(result));
                                }
                            }
                            else
                            {
                                Console.WriteLine("You did not enter a mailbox number in the range 1..10");
                            }
                        }
                        else
                        {
                            Console.WriteLine("Could not connect the the Lego NXT on serial port \""
                                + serialPort + "\".");
                        }
            
                        Console.WriteLine("Press 'enter' or 'return' key to leave the program.");
                        Console.ReadLine();
            
                        // Always disconnect at the end of your program.
                        nxtMessenger.Disconnect();
                    }
                }
            }
            </code>
            </example>
        </member>
        <member name="M:NXTMessaging.NXTMessenger.ReceiveMessage(System.Int32,System.String@)">
            <summary>
            Receive a text message from a mailbox of the NXT.
            <br/>You need to be connected before you can receive a message, see <see cref="M:NXTMessaging.NXTMessenger.Connect(System.String)"/>.
            </summary>
            <param name="mailbox">The mailbox to send the message to. <see cref="F:NXTMessaging.NXTMessenger.MailBoxMinValue"/> and <see cref="F:NXTMessaging.NXTMessenger.MailBoxMaxValue"/> define the valid range of mailboxes.</param>
            <param name="message">The message to receive.</param>
            <returns>The result of the communication, see <see cref="T:NXTMessaging.NXTCommandResult"/></returns>
            <remarks>
            ReceiveMessage is a synchronous, non blocking call. It does not wait for a message to be available.<br/>
            You can check if a message was actually available 
            by using <see cref="F:NXTMessaging.NXTCommandResult.SpecifiedMailboxQueueIsEmpty"/>.
            </remarks>
            <example>
            Example of receiving a String message from a Lego NXT.
            <code>
            static void Main(string[] args) // ReceiveMessage example
            {
            	// Somewhere in youre code you need an NXTMessenger instance.
            	// Probably as private member of a class. 
            	// For the sake of simplicity, we just put it here in this example.
            	NXTMessenger nxtMessenger = new NXTMessenger();
            
            	// Try to connect to the Lego NXT on serial port "COM8"
            	String serialPort = "COM8"; // Replace "COM8" by the port you need!!
            	bool isConnected = nxtMessenger.Connect(serialPort);
            
            	// Check if connection succeeded or failed.
            	if (isConnected)
            	{
            		// Read a mailbox number from the console
            		Console.WriteLine("Please enter a mailbox from which to receive text messages (1..10): ");
            		int mailbox = Convert.ToInt32(Console.ReadLine());
            
            		// check if the entered mailbox is valid
            		if (mailbox &gt;= NXTMessenger.MailBoxMinValue
            			&amp;&amp; mailbox &lt;= NXTMessenger.MailBoxMaxValue)
            		{
            			Console.WriteLine("Press any key to stop reading.");
            			while (!Console.KeyAvailable)
            			{              
            				// Try to receive a String from the Lego NXT (this is a non-blocking call!)
            				String message;
            				NXTCommandResult result = nxtMessenger.ReceiveMessage(mailbox, out message);
            
            				// Check what the result is of the receive attempt.
            				if (result == NXTCommandResult.Success)
            				{
            					// If successful, you can use the received message, else you cannot use it.
            					Console.WriteLine("The received message is: " + message);
            				}
            				else if (result == NXTCommandResult.SpecifiedMailboxQueueIsEmpty)
            				{
            					// It can be that there was no message available in the mailbox.
            					// Use NXTCommandResult.SpecifiedMailboxQueueIsEmpty to detect that.
            					// 
            					// Maybe its best to do nothing here, you are about to get flooded at the console:-)
            					Console.WriteLine("There is no message available in the mailbox.");
            				}
            				else
            				{
            					// some other error happened.... oops maybe stop looping?
            					Console.WriteLine("There was a problem receiving  the message: "
            						+ NXTCommandResultConverter.ToString(result));
            				}
            			}
            		}
            		else
            		{
            			Console.WriteLine("You did not enter a mailbox number in the range 1..10");
            		}
            	}
            	else
            	{
            		Console.WriteLine("Could not connect the the Lego NXT on serial port \""
            			+ serialPort + "\".");
            	}
            
            	Console.WriteLine("Press 'enter' or 'return' key to leave the program.");
            	Console.ReadLine();
            
            	// Always disconnect at the end of your program.
            	nxtMessenger.Disconnect();
            } 
            </code>
            </example>
        </member>
        <member name="M:NXTMessaging.NXTMessenger.ReceiveMessage(System.Int32,System.Boolean@)">
            <summary>
            Receive a logic (bool) message from a mailbox of the NXT.
            <br/>You need to be connected before you can receive a message, see <see cref="M:NXTMessaging.NXTMessenger.Connect(System.String)"/>.
            </summary>
            <param name="mailbox">The mailbox to send the message to. <see cref="F:NXTMessaging.NXTMessenger.MailBoxMinValue"/> and <see cref="F:NXTMessaging.NXTMessenger.MailBoxMaxValue"/> define the valid range of mailboxes.</param>
            <param name="message">The message to receive.</param>
            <returns>The result of the communication, see <see cref="T:NXTMessaging.NXTCommandResult"/></returns>
            <remarks>
            ReceiveMessage is a synchronous, non blocking call. It does not wait for a message to be available.<br/>
            You can check if a message was actually available 
            by using <see cref="F:NXTMessaging.NXTCommandResult.SpecifiedMailboxQueueIsEmpty"/>.
            </remarks>
            <example>
            Example of receiving a logic (bool) message from a Lego NXT.
            <code>
            static void Main(string[] args) // ReceiveMessage example
            {
            	// Somewhere in youre code you need an NXTMessenger instance.
            	// Probably as private member of a class. 
            	// For the sake of simplicity, we just put it here in this example.
            	NXTMessenger nxtMessenger = new NXTMessenger();
            
            	// Try to connect to the Lego NXT on serial port "COM8"
            	String serialPort = "COM8"; // Replace "COM8" by the port you need!!
            	bool isConnected = nxtMessenger.Connect(serialPort);
            
            	// Check if connection succeeded or failed.
            	if (isConnected)
            	{
            		// Read a mailbox number from the console
            		Console.WriteLine("Please enter a mailbox from which to receive text messages (1..10): ");
            		int mailbox = Convert.ToInt32(Console.ReadLine());
            
            		// check if the entered mailbox is valid
            		if (mailbox &gt;= NXTMessenger.MailBoxMinValue
            			&amp;&amp; mailbox &lt;= NXTMessenger.MailBoxMaxValue)
            		{
            			Console.WriteLine("Press any key to stop reading.");
            			while (!Console.KeyAvailable)
            			{              
            				// Try to receive a bool from the Lego NXT (this is a non-blocking call!)
            				bool message;
            				NXTCommandResult result = nxtMessenger.ReceiveMessage(mailbox, out message);
            
            				// Check what the result is of the receive attempt.
            				if (result == NXTCommandResult.Success)
            				{
            					// If successful, you can use the received message, else you cannot use it.
            					Console.WriteLine("The received message is: " + message);
            				}
            				else if (result == NXTCommandResult.SpecifiedMailboxQueueIsEmpty)
            				{
            					// It can be that there was no message available in the mailbox.
            					// Use NXTCommandResult.SpecifiedMailboxQueueIsEmpty to detect that.
            					// 
            					// Maybe its best to do nothing here, you are about to get flooded at the console:-)
            					Console.WriteLine("There is no message available in the mailbox.");
            				}
            				else
            				{
            					// some other error happened.... oops maybe stop looping?
            					Console.WriteLine("There was a problem receiving  the message: "
            						+ NXTCommandResultConverter.ToString(result));
            				}
            			}
            		}
            		else
            		{
            			Console.WriteLine("You did not enter a mailbox number in the range 1..10");
            		}
            	}
            	else
            	{
            		Console.WriteLine("Could not connect the the Lego NXT on serial port \""
            			+ serialPort + "\".");
            	}
            
            	Console.WriteLine("Press 'enter' or 'return' key to leave the program.");
            	Console.ReadLine();
            
            	// Always disconnect at the end of your program.
            	nxtMessenger.Disconnect();
            } 
            </code>
            </example>
        </member>
        <member name="M:NXTMessaging.NXTMessenger.ReceiveMessage(System.Int32,System.Int32@)">
            <summary>
            Receive a number message from a mailbox of the NXT. The number format is Int32.
            <br/>You need to be connected before you can receive a message, see <see cref="M:NXTMessaging.NXTMessenger.Connect(System.String)"/>.
            <para>Required when using NXT-G 1.0 or NXT-G 1.1.</para>
            </summary>
            <param name="mailbox">The mailbox to send the message to. <see cref="F:NXTMessaging.NXTMessenger.MailBoxMinValue"/> and <see cref="F:NXTMessaging.NXTMessenger.MailBoxMaxValue"/> define the valid range of mailboxes.</param>
            <param name="message">The message to receive.</param>
            <returns>The result of the communication, see <see cref="T:NXTMessaging.NXTCommandResult"/></returns>
            <remarks>
            ReceiveMessage is a synchronous, non blocking call. It does not wait for a message to be available.<br/>
            <para>You can check if a message was actually available 
            by using <see cref="F:NXTMessaging.NXTCommandResult.SpecifiedMailboxQueueIsEmpty"/>.</para>
            <para>The 'Receive Message Block' from programs generated by NXT-G 1.0 and 1.1
            expects a 32 bit integer when the message type is set to 'Number'.</para>
            <para>Works on all firmware.</para>
            </remarks>
            <example>
            Example of receiving a number (Int32) message from a Lego NXT.
            <code>
            static void Main(string[] args) // ReceiveMessage example
            {
            	// Somewhere in youre code you need an NXTMessenger instance.
            	// Probably as private member of a class. 
            	// For the sake of simplicity, we just put it here in this example.
            	NXTMessenger nxtMessenger = new NXTMessenger();
            
            	// Try to connect to the Lego NXT on serial port "COM8"
            	String serialPort = "COM8"; // Replace "COM8" by the port you need!!
            	bool isConnected = nxtMessenger.Connect(serialPort);
            
            	// Check if connection succeeded or failed.
            	if (isConnected)
            	{
            		// Read a mailbox number from the console
            		Console.WriteLine("Please enter a mailbox from which to receive text messages (1..10): ");
            		int mailbox = Convert.ToInt32(Console.ReadLine());
            
            		// check if the entered mailbox is valid
            		if (mailbox &gt;= NXTMessenger.MailBoxMinValue
            			&amp;&amp; mailbox &lt;= NXTMessenger.MailBoxMaxValue)
            		{
            			Console.WriteLine("Press any key to stop reading.");
            			while (!Console.KeyAvailable)
            			{              
            				// Try to receive a number (Int32) from the Lego NXT (this is a non-blocking call!)
            				int message;
            				NXTCommandResult result = nxtMessenger.ReceiveMessage(mailbox, out message);
            
            				// Check what the result is of the receive attempt.
            				if (result == NXTCommandResult.Success)
            				{
            					// If successful, you can use the received message, else you cannot use it.
            					Console.WriteLine("The received message is: " + message);
            				}
            				else if (result == NXTCommandResult.SpecifiedMailboxQueueIsEmpty)
            				{
            					// It can be that there was no message available in the mailbox.
            					// Use NXTCommandResult.SpecifiedMailboxQueueIsEmpty to detect that.
            					// 
            					// Maybe its best to do nothing here, you are about to get flooded at the console:-)
            					Console.WriteLine("There is no message available in the mailbox.");
            				}
            				else
            				{
            					// some other error happened.... oops maybe stop looping?
            					Console.WriteLine("There was a problem receiving  the message: "
            						+ NXTCommandResultConverter.ToString(result));
            				}
            			}
            		}
            		else
            		{
            			Console.WriteLine("You did not enter a mailbox number in the range 1..10");
            		}
            	}
            	else
            	{
            		Console.WriteLine("Could not connect the the Lego NXT on serial port \""
            			+ serialPort + "\".");
            	}
            
            	Console.WriteLine("Press 'enter' or 'return' key to leave the program.");
            	Console.ReadLine();
            
            	// Always disconnect at the end of your program.
            	nxtMessenger.Disconnect();
            } 
            </code>
            </example>
        </member>
        <member name="M:NXTMessaging.NXTMessenger.ReceiveMessage(System.Int32,System.Single@)">
            <summary>
            Receive a number message from a mailbox of the NXT. The number format is float.
            <br/>You need to be connected before you can receive a message, see <see cref="M:NXTMessaging.NXTMessenger.Connect(System.String)"/>.
            <para>Required when using NXT-G 2.1. Requires Firmware v1.28 or higher on the Lego NXT.</para>
            </summary>
            <param name="mailbox">The mailbox to send the message to. <see cref="F:NXTMessaging.NXTMessenger.MailBoxMinValue"/> and <see cref="F:NXTMessaging.NXTMessenger.MailBoxMaxValue"/> define the valid range of mailboxes.</param>
            <param name="message">The message to receive.</param>
            <returns>The result of the communication, see <see cref="T:NXTMessaging.NXTCommandResult"/></returns>
            <remarks>
            <para>ReceiveMessage is a synchronous, non blocking call. It does not wait for a message to be available.<br/>
            You can check if a message was actually available 
            by using <see cref="F:NXTMessaging.NXTCommandResult.SpecifiedMailboxQueueIsEmpty"/>.</para>
            <para>The 'Receive Message Block' from programs generated by NXT-G 2.1
            expects a single precision floating point number
            when the message type is set to 'Number'.</para>
            <para>Firmware v1.28 or higher is is required on the Lego NXT.</para>
            </remarks>
            <example>
            Example of receiving a number (float) message from a Lego NXT.
            <code>
            static void Main(string[] args) // ReceiveMessage example
            {
            	// Somewhere in youre code you need an NXTMessenger instance.
            	// Probably as private member of a class. 
            	// For the sake of simplicity, we just put it here in this example.
            	NXTMessenger nxtMessenger = new NXTMessenger();
            
            	// Try to connect to the Lego NXT on serial port "COM8"
            	String serialPort = "COM8"; // Replace "COM8" by the port you need!!
            	bool isConnected = nxtMessenger.Connect(serialPort);
            
            	// Check if connection succeeded or failed.
            	if (isConnected)
            	{
            		// Read a mailbox number from the console
            		Console.WriteLine("Please enter a mailbox from which to receive text messages (1..10): ");
            		int mailbox = Convert.ToInt32(Console.ReadLine());
            
            		// check if the entered mailbox is valid
            		if (mailbox &gt;= NXTMessenger.MailBoxMinValue
            			&amp;&amp; mailbox &lt;= NXTMessenger.MailBoxMaxValue)
            		{
            			Console.WriteLine("Press any key to stop reading.");
            			while (!Console.KeyAvailable)
            			{              
            				// Try to receive a number (float) from the Lego NXT (this is a non-blocking call!)
            				float message;
            				NXTCommandResult result = nxtMessenger.ReceiveMessage(mailbox, out message);
            
            				// Check what the result is of the receive attempt.
            				if (result == NXTCommandResult.Success)
            				{
            					// If successful, you can use the received message, else you cannot use it.
            					Console.WriteLine("The received message is: " + message);
            				}
            				else if (result == NXTCommandResult.SpecifiedMailboxQueueIsEmpty)
            				{
            					// It can be that there was no message available in the mailbox.
            					// Use NXTCommandResult.SpecifiedMailboxQueueIsEmpty to detect that.
            					// 
            					// Maybe its best to do nothing here, you are about to get flooded at the console:-)
            					Console.WriteLine("There is no message available in the mailbox.");
            				}
            				else
            				{
            					// some other error happened.... oops maybe stop looping?
            					Console.WriteLine("There was a problem receiving  the message: "
            						+ NXTCommandResultConverter.ToString(result));
            				}
            			}
            		}
            		else
            		{
            			Console.WriteLine("You did not enter a mailbox number in the range 1..10");
            		}
            	}
            	else
            	{
            		Console.WriteLine("Could not connect the the Lego NXT on serial port \""
            			+ serialPort + "\".");
            	}
            
            	Console.WriteLine("Press 'enter' or 'return' key to leave the program.");
            	Console.ReadLine();
            
            	// Always disconnect at the end of your program.
            	nxtMessenger.Disconnect();
            } 
            </code>
            </example>
        </member>
        <member name="M:NXTMessaging.NXTMessenger.IsValidSerialPortName(System.String)">
            <summary>
            Validates the name of a serial port.<br/>
            Valid names are COM1, COM2, COM3, ...
            </summary>
            <param name="port">The name you want to test.</param>
            <returns>True if the given port has a valid name, else false.</returns>
        </member>
        <member name="P:NXTMessaging.NXTMessenger.IsConnected">
            <summary>
            Gets the connection status of the connection to the Lego NXT.<br/>
            Watch out when using this!! It does not check the alive status of the connected NXT<br/>
            Also it can return true when a non-NXT device is connected to the serial port.
            </summary>
            <value>
            True if connected to the Lego NXT, else false.
            </value>
        </member>
        <member name="P:NXTMessaging.NXTMessenger.DeviceName">
            <summary>
            Gets the name of the connected Lego NXT.
            </summary>
            <value>
            The name of the Lego NXT.
            </value>
            <remarks>
            <para>You can use this method to check the name of the connected NXT.</para>
            <para>For example code, see the <see cref="M:NXTMessaging.NXTMessenger.Connect(System.String)"/> method.</para>
            </remarks>
        </member>
        <member name="T:NXTMessaging.CircularMessageBuffer">
            <summary>
            Thread safe circular buffer (aka ring buffer).<br/>
            The buffer is FIFO and non blocking:<br/>
            - When the buffer is full, the oldest value is overwritten when writing to the buffer.<br/>
            - When the buffer is empty, null is read when reading from the buffer. <br/>
            </summary>
        </member>
        <member name="F:NXTMessaging.CircularMessageBuffer.buffer">
            <summary>
            Buffer containing messages.<br/>
            A payload of a message has as type byte[]
            </summary>
        </member>
        <member name="M:NXTMessaging.CircularMessageBuffer.Enqueue(System.Byte[])">
            <summary>
            Adds a message to the end of the buffer, if message != null.<br/>
            If the buffer is full, then the oldest message is overwritten.
            </summary>
            <param name="message">The message to store in the buffer</param>
        </member>
        <member name="M:NXTMessaging.CircularMessageBuffer.Dequeue">
            <summary>
            Removes and returns the message at the beginning of the buffer.<br/>
            If the buffer is empty, then null is returned.
            </summary>
            <returns>The message at the beginning of the buffer, or null if the buffer is empty.</returns>
        </member>
        <member name="M:NXTMessaging.CircularMessageBuffer.Clear">
            <summary>
            Clear the buffer content
            </summary>
        </member>
        <member name="T:NXTMessaging.BufferedMessageReader">
            <summary>
            This class reads messages from all mailboxes of the NXT and buffers them.<br/>
            <br/>
            The message-reading is done in a separate thread, because.<br/>
            reading a message from the NXT takes a considerable amount of time (50ms on average).<br/>
            <br/>
            The buffer used is a circular buffer of a fixed size (5).<br/>
            The buffer is non blocking and old messages are discarded if the buffer is full and a message is read.<br/>
            Note: The NXT firmware has the same buffer behaviour for message handling.<br/>
            So, messages CAN get lost if overwritten.<br/>
            <br/>
            Buffering can be enabled/disabled for each individual mailbox.<br/>
            Reading a mailbox takes approx 50ms, so when buffering all mailboxes<br/>
            getting info from the NXT will actually take MORE TIME.
            </summary>
        </member>
        <member name="M:NXTMessaging.BufferedMessageReader.ReadAndBufferMessage(System.Int32)">
            <summary>
            Read the content of a mailbox on the NXT and buffers it locally.
            </summary>
            <param name="mailbox">1..10 for the mailbox</param>
        </member>
        <member name="M:NXTMessaging.BufferedMessageReader.ReadMessageFromBuffer(System.Int32)">
            <summary>
            Reads a buffered message.
            </summary>
            <param name="mailbox">The mailbox to get the message from (1..10).</param>
            <returns>Returns the buffered message that was read from the mailbox,<br/>
                     or null if the buffer is empty.</returns>
        </member>
        <member name="T:NXTMessaging.NXTMessengerImpl">
            <summary>
            This class extends the AForge.Robotics.Lego.NXTBrick class with messaging services.
            
            The AForge.Robotics.Lego classes were left unchanged.
            So updating to future releases of AForge.Robotics.Lego can be done without merging
            self made changes.
            
            </summary>
        </member>
        <member name="M:NXTMessaging.NXTMessengerImpl.SendMessage(System.Int32,System.Int32)">
            <summary>
            Note: 
            The 'Receive Message Block' from from programs generated by NXT-G 1.0 and 1.1
            expects a 32 bit integer when the message type is set to 'Number'.
            Works on all firmware.
            </summary>
        </member>
        <member name="M:NXTMessaging.NXTMessengerImpl.SendMessage(System.Single,System.Int32)">
            <summary>
            Note: 
            The 'Receive Message Block' from programs generated by NXT-G 2.1
            expects a single precision floating point number
            when the message type is set to 'Number'.
            Firmware v1.28 or higher is is required.
            </summary>
        </member>
        <member name="M:NXTMessaging.NXTMessengerImpl.ReceiveMessage(System.Int32,System.String@)">
            <summary>
            Receives a Text message from the given mailbox
            </summary>
            <param name="mailbox">The mailbox to read from.</param>
            <param name="message">The message that was read from the mailbox.
            The message contains garbage if the mailbox contains a message of a non Text type, 
            and also when no message was available in the mailbox</param>
            <returns>An NXT error code if an error occurred (e.g 64 if no message is available), 
                     else 0</returns>
        </member>
        <member name="M:NXTMessaging.NXTMessengerImpl.ReceiveMessage(System.Int32,System.Boolean@)">
            <summary>
            Receives a Logic message from the given mailbox
            </summary>
            <param name="mailbox">The mailbox to read from.</param>
            <param name="message">The message that was read from the mailbox.
            The message contains garbage if the mailbox contains a message of a non Logic type, 
            and also when no message was available in the mailbox</param>
            <returns>An NXT error code if an error occurred (e.g 64 if no message is available), 
                     else 0</returns>
        </member>
        <member name="M:NXTMessaging.NXTMessengerImpl.ReceiveMessage(System.Int32,System.Int32@)">
            <summary>
            Receives a Number(int) message from the given mailbox
            Note: 
            The 'Send Message Block' from from programs generated by NXT-G 1.0 and 1.1
            send a 32 bit integer when the message type is set to 'Number'.
            Works on all firmware.
            </summary>
            <param name="mailbox">The mailbox to read from.</param>
            <param name="message">The message that was read from the mailbox.
            The message contains garbage if the mailbox contains a message of a non Number type, 
            and also when no message was available in the mailbox</param>
            <returns>An NXT error code if an error occurred (e.g 64 if no message is available), 
                     else 0</returns>
        </member>
        <member name="M:NXTMessaging.NXTMessengerImpl.ReceiveMessage(System.Int32,System.Single@)">
            <summary>
            Receives a Number(float) message from the given mailbox
            Note: 
            The 'Send Message Block' from programs generated by NXT-G 2.1
            send a single precision floating point number 
            when the message type is set to 'Number'.
            Firmware v1.28 or higher is is required.
            </summary>
            <param name="mailbox">The mailbox to read from.</param>
            <param name="message">The message that was read from the mailbox.
            The message contains garbage if the mailbox contains a message of a non Number type, 
            and also when no message was available in the mailbox</param>
            <returns>An NXT error code if an error occurred (e.g 64 if no message is available),<br/> 
                     else 0</returns>
        </member>
        <member name="T:NXTMessaging.NXTCommandResult">
            <summary>
            Enum containing all responses from the Lego NXT.
            </summary>
        </member>
        <member name="T:NXTMessaging.NXTCommandResultConverter">
            <summary>
            Contains helper methods to convert <see cref="T:NXTMessaging.NXTCommandResult"/> to a String.
            </summary>
        </member>
        <member name="M:NXTMessaging.NXTCommandResultConverter.ToString(NXTMessaging.NXTCommandResult)">
            <summary>
            Convert a given <see cref="T:NXTMessaging.NXTCommandResult"/> to a String.
            </summary>
            <param name="result">The result to be converted</param>
            <returns>A String containing a description of the result.</returns>
        </member>
    </members>
</doc>
