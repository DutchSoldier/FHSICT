package PTS31_Client;

import PTS31_Interfaces.IJoinableSpel;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import PTS31_Server.Constanten;
import PTS31_Server.Speler;
import PTS31_Server.Wedstrijd;
import fontys.observer.RemotePropertyListener;
import java.awt.geom.Point2D;
import java.beans.PropertyChangeEvent;
import java.rmi.RemoteException;
import java.util.Iterator;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Luc
 */
public class WedstrijdFrame extends javax.swing.JFrame implements RemotePropertyListener{
    private Thread loop;
    private Wedstrijd wedstrijd;
    private boolean left, right;
    private IJoinableSpel spel;
    RemotePropertyListener rpl;
    
    /**
     * Creates new form WedstrijdFrame
     */
    public WedstrijdFrame(String username) {
        initComponents();
        
        ArrayList<String> namenSpelers = new ArrayList<>();
        namenSpelers.add(username);
        namenSpelers.add("s2");
        namenSpelers.add("s3");
        
        wedstrijd = new Wedstrijd(namenSpelers);
        wedstrijdPanel.wedstrijd = this.wedstrijd;
       
        this.UpdateInfo();
        this.StartLoop();
    }
    
    public WedstrijdFrame(String username, IJoinableSpel spel) {
        try {
            initComponents();
            rpl = new remoteListener(this);
            this.spel = spel;
            ArrayList<String> namenSpelers = new ArrayList<>();
            namenSpelers.add(username);
            namenSpelers.add("s2");
            namenSpelers.add("s3");
            
            wedstrijd = new Wedstrijd(namenSpelers);
            wedstrijdPanel.wedstrijd = this.wedstrijd;
            
            String chatText = "";
            for (Iterator it = spel.getChatText(rpl).iterator(); it.hasNext();) {
                String s = (String)it.next();
                chatText += s;
                if(it.hasNext()) {
                    s += "\n";
                }
            }
            taChat.setText(chatText);
           
            this.UpdateInfo();
            this.StartLoop();
        } catch (RemoteException ex) {
            Logger.getLogger(WedstrijdFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public void StartLoop() {
        loop = new Thread() {
            @Override
            public void run() {
                GameLoop();
            }
        };
        loop.start();
    }
    
    private void GameLoop(){
        while(!wedstrijd.isAfgelopen()) {
            wedstrijd.update();
            wedstrijdPanel.repaint();
            this.UpdateInfo();
            try {loop.sleep(1000/Constanten.TARGET_FPS);} catch(Exception e) {}
        }
        OverviewFrame of = new OverviewFrame(wedstrijd.getSpelers());
        of.setVisible(true);
        this.setVisible(false);
        this.dispose();
    }    
    
    private void UpdateInfo()
    {
        String str ="";
        for (Speler s : wedstrijd.getSpelers()) {
            str += s.getNaam() + ": " + s.getScore() + "\t";
        }
        str += "Aantal ronden: " + wedstrijd.getRondes();
        this.lbInfo.setText(str);
    }
    
    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this
     * method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        wedstrijdPanel = new PTS31_Client.WedstrijdPanel();
        lbInfo = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                formKeyReleased(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        wedstrijdPanel.setPreferredSize(new java.awt.Dimension(827, 600));

        javax.swing.GroupLayout wedstrijdPanelLayout = new javax.swing.GroupLayout(wedstrijdPanel);
        wedstrijdPanel.setLayout(wedstrijdPanelLayout);
        wedstrijdPanelLayout.setHorizontalGroup(
            wedstrijdPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 827, Short.MAX_VALUE)
        );
        wedstrijdPanelLayout.setVerticalGroup(
            wedstrijdPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 600, Short.MAX_VALUE)
        );

        getContentPane().add(wedstrijdPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 31, -1, -1));

        lbInfo.setText("jLabel1");
        getContentPane().add(lbInfo, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 11, 807, -1));

        pack();
    }// </editor-fold>                        

    private void formKeyPressed(java.awt.event.KeyEvent evt) {                                
       if (evt.getKeyCode() == KeyEvent.VK_LEFT) {
           left = true;
           wedstrijd.direction = -1;
        }
        
        else if (evt.getKeyCode() == KeyEvent.VK_RIGHT) {
            right = true;
            wedstrijd.direction  = 1;
        }
    }                               

    private void formKeyReleased(java.awt.event.KeyEvent evt) {                                 
        if (evt.getKeyCode() == KeyEvent.VK_RIGHT) {
            right = false;
        }
        else if (evt.getKeyCode() == KeyEvent.VK_LEFT) {
            left = false;
        }     
        if (right) {
            wedstrijd.direction = 1;
        }
        else if (left) {
            wedstrijd.direction = -1;
        }
        else {
            wedstrijd.direction =  0;
        } 
    }                                

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(WedstrijdFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(WedstrijdFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(WedstrijdFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(WedstrijdFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new WedstrijdFrame("user").setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify                     
    private javax.swing.JLabel lbInfo;
    private PTS31_Client.WedstrijdPanel wedstrijdPanel;
    // End of variables declaration                   

    @Override
    public void propertyChange(PropertyChangeEvent pce) throws RemoteException {
        switch (pce.getPropertyName()) {
            case "Chat" :
                String chatText = "";
                for (Iterator it = ((ArrayList<String>)pce.getNewValue()).iterator(); it.hasNext();) {
                    String s = (String)it.next();
                    chatText += s;
                    if(it.hasNext()) {
                        s += "\n";
                    }
                }
                taChat.setText(chatText);
                break;
            case "Puck" :
                //puck locatie = pce.getNewValue();
                break;
            case "Speler" :
                for (Point2D p2d : (ArrayList<Point2D>)pce.getNewValue()) {
                    //speler locaties doorschrijven
                }
                break;
        }
    }
    class remoteListener implements RemotePropertyListener {
        private WedstrijdFrame frame;
        
        public remoteListener(WedstrijdFrame frame) {
            this.frame = frame;
        }
        
        @Override
        public void propertyChange(PropertyChangeEvent pce) throws RemoteException {
            throw new UnsupportedOperationException("Not supported yet.");
        }
        
    }
}
