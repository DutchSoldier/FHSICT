/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * KochPanel.java
 *
 * Created on 2-jul-2011, 10:08:42
 */
package gui;

import calculate.*;
import console.Console;
import java.awt.Color;
import java.awt.Graphics;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import timeutil.TimeStamp;

/**
 *
 * @author Peter Boots
 */
public class KochPanel extends javax.swing.JPanel {

    private final ArrayList<Edge> edges = new ArrayList<Edge>();

    /**
     * Creates new form KochPanel
     */
    @SuppressWarnings("LeakingThisInConstructor")
    public KochPanel() {
        initComponents();
    }

    public void changeLevel(int nxt) {
        this.repaint();
    }

    public void loadEdges() {
        try {
            TimeStamp stamp = new TimeStamp();

            this.edges.clear();

            // Zonder buffer - binair
            stamp.setBegin("START BINAIR NO-BUFFER LOADING");
            DataInputStream binairStream = new DataInputStream(new FileInputStream(Console.file + "binair_no_buffer.dat"));
            int level1 = binairStream.readInt();
            while (binairStream.available() > 0) {
                this.edges.add(new Edge(binairStream.readDouble(), binairStream.readDouble(), binairStream.readDouble(), binairStream.readDouble(), new Color(binairStream.readInt())));
            }
            binairStream.close();
            stamp.setEnd("END BINAIR NO-BUFFER LOADING");
            System.out.println(stamp.toString());

            this.edges.clear();
            stamp = new TimeStamp();


            // Met buffer - binair
            stamp.setBegin("START BINAIR BUFFER LOADING");
            DataInputStream bufferedBinairStream = new DataInputStream(new BufferedInputStream(new FileInputStream(Console.file + "binair_buffer.dat")));
            int level2 = bufferedBinairStream.readInt();
            while (bufferedBinairStream.available() > 0) {
                this.edges.add(new Edge(bufferedBinairStream.readDouble(), bufferedBinairStream.readDouble(), bufferedBinairStream.readDouble(), bufferedBinairStream.readDouble(), new Color(bufferedBinairStream.readInt())));
            }
            bufferedBinairStream.close();
            stamp.setEnd("END BINAIR BUFFER LOADING");
            System.out.println(stamp.toString());

            this.edges.clear();

            stamp = new TimeStamp();

            // Met buffer - text  
            stamp.setBegin("START TEXT BUFFER LOADING");
            Scanner scanner = new Scanner(new FileReader(Console.file + "text_buffer.dat"));
            int level3 = scanner.nextInt();
            while (scanner.hasNext()) {
                scanner.next();
                double x1 = scanner.nextDouble();
                scanner.next();
                double y1 = scanner.nextDouble();
                scanner.next();
                double x2 = scanner.nextDouble();
                scanner.next();
                double y2 = scanner.nextDouble();
                scanner.next();
                int rgb = scanner.nextInt();

                this.edges.add(new Edge(x1, y1, x2, y2, new Color(rgb)));
            }
            scanner.close();
            stamp.setEnd("END TEXT BUFFER LOADING");
            System.out.println(stamp.toString());


        } catch (Exception ex) {
            Logger.getLogger(KochPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBackground(new java.awt.Color(0, 0, 0));
        setDoubleBuffered(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 481, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 309, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    @Override
    public void paintComponent(Graphics g) {
        this.loadEdges();
        TimeStamp stamp = new TimeStamp();
        stamp.setBegin("START PAINT");
        super.paintComponent(g);
        for (int i = 0; i < this.edges.size(); i++) {
            Edge e = KochFrame.edgeAfterZoomAndDrag(this.edges.get(i));
            g.setColor(e.color);
            g.drawLine((int) e.X1, (int) e.Y1, (int) e.X2, (int) e.Y2);
        }
        stamp.setEnd("EINDE PAINT");
        System.out.println(stamp.toString());
        //System.out.println(this.koch.getNrOfEdges());
    }
}
