/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package encryption;

import java.io.DataInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.file.Files;
import java.security.InvalidKeyException;
import java.security.KeyFactory;
import java.security.NoSuchAlgorithmException;
import java.security.PublicKey;
import java.security.Signature;
import java.security.SignatureException;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.X509EncodedKeySpec;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author Remi_Arts
 */
public class VerifierFrame extends javax.swing.JFrame {

    private File PublicKey;
    private File Input;
    private static final String ALGORITHM = "RSA";
    private static final String SIGNALGORITHM = "SHA1withRSA";

    /**
     * Creates new form MainFrame
     */
    public VerifierFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        LabelPK = new javax.swing.JLabel();
        BTSelectPK = new javax.swing.JButton();
        LabelFILE = new javax.swing.JLabel();
        BTSelectFILE = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        BTSIGN = new javax.swing.JButton();
        LBRESULT = new javax.swing.JLabel();
        label2 = new java.awt.Label();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        LabelPK.setText("-");

        BTSelectPK.setText("Public Key");
        BTSelectPK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTSelectPKActionPerformed(evt);
            }
        });

        LabelFILE.setText("-");

        BTSelectFILE.setText("File");
        BTSelectFILE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTSelectFILEActionPerformed(evt);
            }
        });

        jLabel5.setText("RESULT:");

        BTSIGN.setText("Test");
        BTSIGN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTSIGNActionPerformed(evt);
            }
        });

        LBRESULT.setText("-");

        label2.setAlignment(java.awt.Label.CENTER);
        label2.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        label2.setText("Verifier");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(BTSIGN, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(LabelPK)
                            .addComponent(LabelFILE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(BTSelectPK, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(BTSelectFILE, javax.swing.GroupLayout.DEFAULT_SIZE, 105, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(18, 18, 18)
                        .addComponent(LBRESULT)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(122, 122, 122)
                .addComponent(label2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(130, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(label2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BTSelectPK)
                    .addComponent(LabelPK))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BTSelectFILE)
                    .addComponent(LabelFILE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(LBRESULT))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(BTSIGN, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

        private void BTSelectPKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTSelectPKActionPerformed
            JFileChooser jfc = new JFileChooser();
            int result = jfc.showOpenDialog(this);
            if (!(result == JFileChooser.APPROVE_OPTION)) {
                return;
            }
            PublicKey = jfc.getSelectedFile();
            LabelPK.setText(PublicKey.getName());
        }//GEN-LAST:event_BTSelectPKActionPerformed

        private void BTSelectFILEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTSelectFILEActionPerformed
            JFileChooser jfc = new JFileChooser();
            int result = jfc.showOpenDialog(this);
            if (!(result == JFileChooser.APPROVE_OPTION)) {
                return;
            }
            Input = jfc.getSelectedFile();
            LabelFILE.setText(Input.getName());
        }//GEN-LAST:event_BTSelectFILEActionPerformed

        private void BTSIGNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTSIGNActionPerformed

            if (LabelFILE.getText().equals("-")) {
                JOptionPane.showMessageDialog(this, "Please select a file");
                return;
            }

            if (LabelPK.getText().equals("-")) {
                JOptionPane.showMessageDialog(this, "Please select a public key");
                return;
            }
            
            FileInputStream fis = null;
            DataInputStream dis = null;
            try {
                String fileName = Input.getName().replaceFirst("[.][^.]+$", "");
                String extension = "";
                int i = fileName.lastIndexOf('.');
                if (i > 0) {
                    extension = fileName.substring(i + 1);
                }
                fileName += extension;
                File output = new File(Input.getParent() + "\\" + fileName);
                PublicKey PK = null;
                byte[] originalFile = null;
                //read
                try {
                    fis = new FileInputStream(PublicKey);
                    dis = new DataInputStream(fis);
                    byte[] keybytes = new byte[(int) PublicKey.length()];
                    dis.readFully(keybytes);
                    dis.close();
                    X509EncodedKeySpec spec
                            = new X509EncodedKeySpec(keybytes);//ANS1 encoding of public key
                    KeyFactory kf = KeyFactory.getInstance(ALGORITHM);
                    PK = kf.generatePublic(spec);
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(VerifierFrame.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException | NoSuchAlgorithmException | InvalidKeySpecException ex) {
                    Logger.getLogger(VerifierFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                //Read file
                try {
                    originalFile = Files.readAllBytes(Input.toPath());
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(VerifierFrame.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(VerifierFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                fis = new FileInputStream(Input);
                dis = new DataInputStream(fis);
                byte len = dis.readByte();
                int sigLen = Math.abs((int) len);
                byte[] signature = new byte[sigLen];
                dis.read(signature);
                
                Signature S = Signature.getInstance(SIGNALGORITHM);
                S.initVerify(PK);//initialize object for verification
                byte[] filebuffer = new byte[(int) Input.length() - 1 - Math.abs(sigLen)];
                dis.read(filebuffer);
                
                S.update(filebuffer);

                boolean result = S.verify(signature);//Verifies the signature
                if (result) {
                    LBRESULT.setText("OK!");
                    //Restore file
                    FileOutputStream fos = new FileOutputStream(Input.getParent() + "\\" + Input.getName().split("\\(SignedBy")[0] + extension);
                    fos.write(filebuffer);
                } else {
                    LBRESULT.setText("NOT OK!");
                }

            } catch (FileNotFoundException ex) {
                Logger.getLogger(VerifierFrame.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException | NoSuchAlgorithmException | InvalidKeyException | SignatureException ex) {
                Logger.getLogger(VerifierFrame.class.getName()).log(Level.SEVERE, null, ex);
            } finally {
                try {
                    fis.close();
                    dis.close();
                } catch (IOException ex) {
                    Logger.getLogger(VerifierFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }


        }//GEN-LAST:event_BTSIGNActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VerifierFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VerifierFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VerifierFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VerifierFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VerifierFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BTSIGN;
    private javax.swing.JButton BTSelectFILE;
    private javax.swing.JButton BTSelectPK;
    private javax.swing.JLabel LBRESULT;
    private javax.swing.JLabel LabelFILE;
    private javax.swing.JLabel LabelPK;
    private javax.swing.JLabel jLabel5;
    private java.awt.Label label2;
    // End of variables declaration//GEN-END:variables
}
