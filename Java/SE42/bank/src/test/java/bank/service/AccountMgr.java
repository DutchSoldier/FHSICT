/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package bank.service;

import bank.dao.AccountDAOJPAImpl;
import static org.junit.Assert.*;


import org.junit.Before;
import org.junit.Test;
import bank.domain.Account;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import util.DatabaseCleaner;

/**
 *
 * @author Subhi
 */
public class AccountMgr {

    private EntityManagerFactory emf = Persistence.createEntityManagerFactory("bankPU");
    private EntityManager em = emf.createEntityManager();

    @Before
    public void setUp() throws Exception {
        System.out.print("before");
        DatabaseCleaner dc = new DatabaseCleaner(Persistence.createEntityManagerFactory("bankPU").createEntityManager());
        dc.clean();
    }

    @Test
    public void create() {
        Account account = new Account(111L);
        em.getTransaction().begin();
        em.persist(account);
        //Id is still null since the item was not written to the database yet but the id is autogenerated
        assertNull(account.getId());
        em.getTransaction().commit();
        System.out.println("AccountId: " + account.getId());
        //Entity was written to database, so we now have an id
        assertTrue(account.getId() > 0L);
    }

    @Test
    public void rollback() {
        Account account = new Account(111L);
        em.getTransaction().begin();
        em.persist(account);
        assertNull(account.getId());
        em.getTransaction().rollback();
        AccountDAOJPAImpl accDAO = new AccountDAOJPAImpl(Persistence.createEntityManagerFactory("bankPU").createEntityManager());
        assertTrue(accDAO.count() == 0);
    }

    @Test
    public void flush() {
        Long expected = -100L;
        Account account = new Account(111L);
        account.setId(expected);
        em.getTransaction().begin();
        em.persist(account);
        //ID was explicitly set so -100L, and not validated yet so id = the expected id
        assertTrue(expected == account.getId());
        em.flush();
        //Data was synced to the database, id is marked as autogenerated, so it was now autogenerated,
        //And it is not the same as expected anymore
        assertFalse(expected == account.getId());
        em.getTransaction().commit();
        //What should I explain here?
        //TODO: verklaar en pas eventueel aan
    }

    @Test
    public void changesAfterPersist() {
        Long expectedBalance = 400L;
        Account account = new Account(114L);
        em.getTransaction().begin();
        em.persist(account);
        account.setBalance(expectedBalance);
        em.getTransaction().commit();
        System.out.println("Balance:" + account.getBalance());
        assertEquals(expectedBalance, account.getBalance());
        //Balance is 400,because we set it to, well, 400
        Long acId = account.getId();
        account = null;
        EntityManager em2 = emf.createEntityManager();
        em2.getTransaction().begin();
        Account found = em2.find(Account.class, acId);

        //Data was persisted, so we can read it from the database and do stuff with it
        assertEquals(expectedBalance, found.getBalance());
    }

    @Test
    public void changesAfterRefresh() {
        Long expectedBalance = 400L;
        //Write original account object
        Account account = new Account(114L);
        em.getTransaction().begin();
        account.setBalance(expectedBalance);
        em.persist(account);
        em.getTransaction().commit();

        //Get account id
        Long acId = account.getId();

        EntityManager em2 = emf.createEntityManager();
        em2.getTransaction().begin();
        //Fetch found object
        Account found = em2.find(Account.class, acId);
        Long updatedBalance = 30L;
        //Update origial object
        account.setBalance(updatedBalance);
        em2.merge(account);
        em2.getTransaction().commit();
        em2.refresh(found);
        //Check that changes actually work
        assertEquals(updatedBalance, found.getBalance());
    }

    @Test
    public void merge() {

        Account acc = new Account(1L);

// scenario 1
        Long balance1 = 100L;
        em.getTransaction().begin();
        em.persist(acc);
        acc.setBalance(balance1);
        em.getTransaction().commit();
        //TODO: voeg assessments toe om je verwachte waarde van de attributen te verifieren.
        assertEquals(balance1, acc.getBalance());
        //TODO: doe dit zowel voor de bovenstaande java objecten als voor opnieuw 
        //bij de entitymanager opgevraagde objecten met overeenkomstig Id.
        Long accId = acc.getId();
        EntityManager em2 = Persistence.createEntityManagerFactory("bankPU").createEntityManager();
        Account accTest = em2.find(Account.class, accId);
        assertEquals(acc.getBalance(), accTest.getBalance());


// scenario 2
        Long balance2a = 211L;
        em.getTransaction().begin();
        Long accountnr = 2L;
        acc = new Account(accountnr);
        em.merge(acc);
        acc.setBalance(balance2a);
        em.merge(acc);
        em.getTransaction().commit();
//TODO: voeg assessments toe om je verwachte waarde van de attributen te verifiëren.
        assertEquals(acc.getBalance(), balance2a);
        assertEquals(acc.getAccountNr(), accountnr);
//TODO: doe dit zowel voor de bovenstaande java objecten als voor opnieuw bij de entitymanager opgevraagde objecten met overeenkomstig Id. 
// HINT: gebruik acccountDAO.findByAccountNr
        AccountDAOJPAImpl accountDao = new AccountDAOJPAImpl(Persistence.createEntityManagerFactory("bankPU").createEntityManager());
        Account accNew = accountDao.findByAccountNr(accountnr);
        assertEquals(accNew.getBalance(), balance2a);
        assertEquals(accNew.getAccountNr(), accountnr);


// scenario 3
        Long balance3b = 322L;
        Long balance3c = 333L;
        em.getTransaction().begin();
        acc = new Account(3L);
        Account acc2 = em.merge(acc);
        acc2.setBalance(balance3b);
        acc.setBalance(balance3c);
        em.getTransaction().commit();
//TODO: voeg assessments toe om je verwachte waarde van de attributen te verifiëren.
//TODO: doe dit zowel voor de bovenstaande java objecten als voor opnieuw bij de entitymanager opgevraagde objecten met overeenkomstig Id.
//Hint: met de methode em.containst(object) kun je controleren of een object door de  entityManager? Beheerd wordt.
        assertEquals(acc2.getBalance(), balance3b);
        assertEquals(acc.getBalance(), balance3c);
        
        //Acc2 is the tracked object because we merged
        assertTrue(em.contains(acc2));
        assertFalse(em.contains(acc));
        
        
        em2 = Persistence.createEntityManagerFactory("bankPU").createEntityManager();
        acc2 = em2.find(Account.class, acc2.getId());
        assertEquals(acc2.getBalance(), balance3b);
    }
    
    @Test
    public void findAndClear() {
//Find en clear
        Account acc1 = new Account(77L);
        em.getTransaction().begin();
        em.persist(acc1);
        em.getTransaction().commit();
//Database bevat nu een account.

// scenario 1        
        Account accF1;
        Account accF2;
        accF1 = em.find(Account.class, acc1.getId());
        accF2 = em.find(Account.class, acc1.getId());
        assertSame(accF1, accF2);

// scenario 2        
        accF1 = em.find(Account.class, acc1.getId());
        em.clear();
        accF2 = em.find(Account.class, acc1.getId());
        assertSame(accF1.getAccountNr(), accF2.getAccountNr());
        assertFalse(accF1 == accF2);
//TODO verklaar verschil tussen beide scenario's
        //We called clear, all entities that were attached to the entitymanager were detached
        //thus, when fetching accF2 we get an actually new instance of the object entity
        //instead of the same actual object
    }
    @Test
    public void remove() {
        Account acc1 = new Account(88L);
        em.getTransaction().begin();
        em.persist(acc1);
        em.getTransaction().commit();
        Long id = acc1.getId();
        //Database bevat nu een account
        em.remove(acc1);
        assertEquals(id, acc1.getId());        
        Account accFound = em.find(Account.class, id);
        assertNull(accFound);
        //TODO: verklaar bovenstaande asserts
        //After creating the account, we remove it again using em.remove, thus, 
        //the account doesn't exist anymore, so a search for it returns null
    }
}
